#pragma once

#include <vulkan/vulkan.h>

#include "Queue.hpp"

namespace wowgm::graphics
{
    class PhysicalDevice;
    struct QueueFamilyIndices;

    /*
     * The logical device is one the most important objects created in our application. It represents real hardware,
     * along with all the extensions and features enabled for it and all the queues requested from it:
     *
     * The logical device allows us to perform almost all the work typically done in rendering applications, such as
     * creating images and buffers, setting the pipeline state, or loading shaders. The most important ability it
     * gives us is recording commands (such as issuing draw calls or dispatching computational work) and submitting
     * them to queues, where they are executed and processed by the given hardware. After such execution, we acquire
     * the results of the submitted operations. These can be a set of values calculated by compute shaders, or other
     * data (not necessarily an image) generated by draw calls. All this is performed on a logical device.
     */
    class LogicalDevice
    {
    public:
        LogicalDevice(VkDevice device, QueueFamilyIndices& indices);
        ~LogicalDevice();

        Queue* GetGraphicsQueue();
        Queue* GetPresentQueue();

        VkDevice GetVkDevice();

        operator VkDevice() const { return _device; }

    private:
        VkDevice _device;

        // This *needs* to be in the same order as indices defined in QueueFamilyIndices.
        // (We are more or less memcpy-ing)
        Queue* _graphicsQueue;
        Queue* _presentQueue;
    };
}
